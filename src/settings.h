// ETH32 - an Enemy Territory cheat for windows
// Copyright (c) 2007 eth32 team
// www.cheatersutopia.com & www.nixcoders.org

#pragma once
#define MAX_SETTING_VALUES	23

typedef enum {
	SETTING_INT,
	SETTING_FLOAT,
	SETTING_BOOL,
	SETTING_VEC3,
	SETTING_VEC4,
	SETTING_BYTE3,
	SETTING_STRING,
	MAX_SETTINGS
} settingtype_t;

typedef struct settingvalue_s {
	float value;
	char *text;
} settingvalue_t;

typedef struct settingdef_s {
	char *name;
	char *defaultValue;
	settingtype_t type;
	void *target;
	char *description;
	float min, max;
	settingvalue_t values[MAX_SETTING_VALUES];
} settingdef_t;

const static settingdef_t settingsDefs[] =
{
	// Name				Default			Type			Target
	//	Description
	//	Min / Max
	//		Value				TextValue
	{ "champlayer",			"13",			SETTING_INT,		(void*)&eth32.settings.chamsPlayer,
		"set the style of chams to be applied to players",
		CHAMS_OFF, MAX_CHAMS-1,
		{
			{ (int)CHAMS_OFF,		"off" },
			{ (int)CHAMS_KERAMIC,		"keramic" },
			{ (int)CHAMS_CRISPWAVE,		"crispwave" },
			{ (int)CHAMS_CRYSTAL,		"crystal" },
			{ (int)CHAMS_GLOW,		"glow" },
			{ (int)CHAMS_FLAME,		"flame" },
			{ (int)CHAMS_SOLIDA,		"solid_a" },
			{ (int)CHAMS_SOLIDB,		"solid_b" },
			{ (int)CHAMS_QUADA,		"quad_a" },			
			{ (int)CHAMS_QUADB,		"quad_b" },
			{ (int)CHAMS_QUADC,		"quad_c" },
			{ (int)CHAMS_QUADD,		"quad_d" },
			{ (int)CHAMS_MATRIX,		"matrix" },
			{ (int)CHAMS_THERMAL,		"thermal" },
			{ (int)CHAMS_CRYSTALB,		"crystal_b" },
      			{ (int)CHAMS_XRAY,		"xray" },
      			{ (int)CHAMS_GRID,		"grid" },
     			{ (int)CHAMS_WAVE,		"wave" },
      			{ (int)CHAMS_CRISPY,		"crispy" },
      			{ (int)CHAMS_MARBLE,		"marble" },
      			{ (int)CHAMS_PLASMA,		"plasma" },
      			{ (int)CHAMS_PLASTIC,		"plastic" },
      			{ (int)CHAMS_TEST,		"test" },
		},
	},
	{ "outchamplayer",			"3",			SETTING_INT,		(void*)&eth32.settings.outChams,
		"set the style of chams to be applied to players outline",
		CHAMSOUT_OFF, MAX_CHAMSOUT-1,
		{
			{ (int)CHAMSOUT_OFF,		"off" },
			{ (int)CHAMSOUT_ORIG,		"original" },
			{ (int)CHAMSOUT_MARBLE,		"marble" },
			{ (int)CHAMSOUT_CRYSTAL,	"crystal" },
			{ (int)CHAMSOUT_THERMAL,	"thermal" },
			{ (int)CHAMSOUT_QUAD,		"quad" },
			{ (int)CHAMSOUT_PLASMA,		"plasma" },
			{ (int)CHAMSOUT_PLASTIC,	"plastic" },
		},
	},
	{ "chamweapon",			"19",			SETTING_INT,		(void*)&eth32.settings.chamsWeapon,
		"set the style of chams to be applied to weapons",
		CHAMS_OFF, MAX_CHAMS-1,
		{
			{ (int)CHAMS_OFF,		"off" },
			{ (int)CHAMS_KERAMIC,		"keramic" },
			{ (int)CHAMS_CRISPWAVE,		"crispwave" },
			{ (int)CHAMS_CRYSTAL,		"crystal" },
			{ (int)CHAMS_SOLIDA,		"solid_a" },
			{ (int)CHAMS_SOLIDB,		"solid_b" },
			{ (int)CHAMS_QUADA,		"quad_a" },			
			{ (int)CHAMS_QUADB,		"quad_b" },
			{ (int)CHAMS_QUADC,		"quad_c" },
			{ (int)CHAMS_QUADD,		"quad_d" },
			{ (int)CHAMS_MATRIX,		"matrix" },
			{ (int)CHAMS_THERMAL,		"thermal" },
			{ (int)CHAMS_CRYSTALB,		"crystal_b" },
      			{ (int)CHAMS_XRAY,		"xray" },
      			{ (int)CHAMS_GRID,		"grid" },
     			{ (int)CHAMS_WAVE,		"wave" },
      			{ (int)CHAMS_CRISPY,		"crispy" },
      			{ (int)CHAMS_MARBLE,		"marble" },
      			{ (int)CHAMS_PLASMA,		"plasma" },
      			{ (int)CHAMS_PLASTIC,		"plastic" },
      			{ (int)CHAMS_TEST,		"test" },
		},
	},
	{ "outchamweapon",        	"5",			SETTING_INT,        	(void*)&eth32.settings.weapoutChams,
		"set the style of chams to be applied to weapons outline",
               CHAMSOUT_OFF, MAX_CHAMSOUT-1,
               {
			{ (int)CHAMSOUT_OFF,		"off" },
			{ (int)CHAMSOUT_ORIG,		"original" },
 			{ (int)CHAMSOUT_MARBLE,		"marble" },
 			{ (int)CHAMSOUT_CRYSTAL,	"crystal" },
 			{ (int)CHAMSOUT_THERMAL,	"thermal" },
			{ (int)CHAMSOUT_QUAD,		"quad" },
			{ (int)CHAMSOUT_PLASMA,		"plasma" },
 			{ (int)CHAMSOUT_PLASTIC,	"plastic" },
                },
	},
	{ "tdoutline",		"true",			SETTING_BOOL,		(void*)&eth32.settings.TDOutLine,
		"show outline chams through walls",
	},
	{ "espname",			"true",			SETTING_BOOL,		(void*)&eth32.settings.espName,
		"display player names above their heads",
	},
	{ "wallhack",			"true",			SETTING_BOOL,		(void*)&eth32.settings.wallhack,
		"view players and items through walls",
	},
	{ "wallhackdist",		"10000",		SETTING_FLOAT,		(void*)&eth32.settings.wallhackDistance,
		"distance over which to enable wallhack for players",
		0, 10000,
	},
	{ "wallhackdist_enable",	"false",		SETTING_BOOL,		(void*)&eth32.settings.doDistWallhack,
		"enable distance sensitive wallhack",
	},
	{ "blackout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.blackout,
		"display the blackout around scoped weapons",
	},
	{ "radarrange",			"2000",			SETTING_FLOAT,		(void*)&eth32.settings.radarRange,
		"sets the range of the radar window",
		0, 10000,
	},
	{ "xhairsize",			"1",			SETTING_FLOAT,		(void*)&eth32.settings.crossSize,
		"sets custom crosshair size",
		0, 100,
	},
	{ "xhairthick",			"1",			SETTING_FLOAT,		(void*)&eth32.settings.crossThick,
		"sets custom crosshair thickness",
		0, 10,
	},
	{ "xhairtype",			"4",			SETTING_INT,		(void*)&eth32.settings.customXhair,
		"sets the custom crosshair type",
		XHAIR_OFF, XHAIR_MAX-1,
		{
			{ (int)XHAIR_OFF,	"off" },
			{ (int)XHAIR_SNIPER,	"Sniper" },
			{ (int)XHAIR_CROSS, 	"Open Cross" },
			{ (int)XHAIR_CROSS2,	"Closed Cross" },
			{ (int)XHAIR_DOT,	"Dot" },
		},
	},
	{ "removefoliage",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeFoliage,
		"completely removes the foliage (trees, bushes, etc)",
	},
	{ "autovote",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoVote,
		"enables autovoting (vote no) against vote kicks",
	},
	{ "warningmsgs",		"true",			SETTING_BOOL,		(void*)&eth32.settings.showReload,
		"draws warning messages (i.e: RELOADING)",
	},
	{ "weapzoom",			"false",		SETTING_BOOL,		(void*)&eth32.settings.weaponZoom,
		"toggle weapon zoom for scoped weapons",
	},
	{ "scopedspeed",		"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.scopedTurnSpeed,
		"determines turning speed while scoped, (normal unscoped speed = 1.0)",
		0.1, 1.0,
	},
	{ "smoketransp",		"0",			SETTING_INT,		(void*)&eth32.settings.smoketrnsp,
		"set the transparency of smoke",
		0,	100,
	},
	/*{ "longdistance",		"1500",			SETTING_INT,		(void*)&eth32.settings.longDistance,
		"distance where some corrections (burst firing, etc) will take place",
		0,	10000,
	},*/
	{ "respawntimers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.respawnTimers,
		"display enemy respawn times",
	},
	{ "autotapout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoTapout,
		"when killed, auto-tapout and sends you instantly to the reinforcements queue",
	},
 	{ "speclist",			"true",			SETTING_BOOL,		(void*)&eth32.settings.getSpeclist,
		 "show who is spectating you",
 	},
	{ "aimmode",		"1",				SETTING_INT,		(void*)&eth32.settings.aimMode,
		"master aimbot mode",
		AIMMODE_OFF, AIMMODE_MAX-1,
		{
			{ (int)AIMMODE_OFF,	"off" },
			{ (int)AIMMODE_NORMAL,	"normal" },
			{ (int)AIMMODE_HUMAN, 	"human" },
		},
	},
	{ "humanMode",		"1",				SETTING_INT,		(void*)&eth32.settings.humanMode,
		"which human method should be used",
		HUMAN_AIM_HALF_LOGINS, HUMAN_AIM_MAX-1,
		{
			{ (int)HUMAN_AIM_HALF_LOGINS,	"Simple Logins" },
			{ (int)HUMAN_AIM_FULL_LOGINS,	"Full Logins" },
		},
	},
	{ "human1_speed",		"0.05",			SETTING_FLOAT,		(void*)&eth32.settings.human1_speed,
		 "Simple Logins - Speed",
 	},
	{ "human2_humanValue",		"0.5",			SETTING_FLOAT,		(void*)&eth32.settings.human2_humanValue,
		 "FULL Logins - divMax",
 	},
	{ "human2_aimX",		"5",			SETTING_FLOAT,		(void*)&eth32.settings.human2_aimX,
		 "FULL Logins - SpeedX",
 	},

	{ "human2_aimY",		"5",			SETTING_FLOAT,		(void*)&eth32.settings.human2_aimY,
		 "FULL Logins - SpeedY",
 	},

	{ "human2_divMin",		"3",			SETTING_FLOAT,		(void*)&eth32.settings.human2_divMin,
		 "FULL Logins - divMin",
 	},

	{ "human2_divMin",		"5",			SETTING_FLOAT,		(void*)&eth32.settings.human2_divMax,
		 "FULL Logins - divMax",
 	},
	{ "lockMouse",		"false",			SETTING_BOOL,		(void*)&eth32.settings.lockMouse,
		 "Should mouse get locked while shooting?",
	},
	{ "aimtype",			"4",			SETTING_INT,		(void*)&eth32.settings.aimType,
		"determines when the aimbot will activate",
		AIM_OFF, AIM_MAX-1,
		{
			{ (int)AIM_OFF,		"off" },
			{ (int)AIM_ON_FIRE,	"onfire" },
			{ (int)AIM_ON_BUTTON, 	"onbutton" },
			{ (int)AIM_ALWAYS,	"always" },
			{ (int)AIM_TRIGGER,	"trigger" },
		},
	},
	{ "aimsort",			"1",			SETTING_INT,		(void*)&eth32.settings.aimSort,
		"sets type of sort to be used with valid targets",
		SORT_OFF, SORT_MAX-1,
		{
			{ (int)SORT_OFF,	"off" },
			{ (int)SORT_DISTANCE,	"distance" },
			{ (int)SORT_HEALTH,   	"Health" },
			{ (int)SORT_CROSSHAIR,	"crosshair" },
			{ (int)SORT_KDRATIO,	"kdratio" },
			{ (int)SORT_ACCURACY,	"accuracy" },
			{ (int)SORT_TARGETING,	"targeting" },
			{ (int)SORT_THREAT,	"threat" },
		},
	},
	{ "autofire",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autofire,
		"aimbot will fire for you when target available\n   (autofire must be turned on per weapon aswell)",
	},
	{ "locktarget",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockTarget,
		"once a target is aquired, aimbot will stay on this target while it remains visible",
	},
	{ "headbody",			"4",			SETTING_INT,		(void*)&eth32.settings.headbody,
		"determines if the aimbot uses the head or body and which order",
		0, AP_MAX-1,
		{
			{ (int)BODY_ONLY,		"bodyonly" },
			{ (int)HEAD_ONLY,		"headonly" },
			{ (int)BODY_HEAD,		"bodyfirst" },
			{ (int)HEAD_BODY,		"headfirst" },
			{ (int)HEAD_PRIORITY,		"headpriority" },
		},
	},
	{ "atkvalid",			"false",		SETTING_BOOL,		(void*)&eth32.settings.atkValidate,
		"inhibits firing, even manually, until a valid target is visible",
	},
	{ "antitk",			"false",		SETTING_BOOL,		(void*)&eth32.settings.antiTk,
		"returns fire to teamkillers",
	},
	{ "autodelay",			"true",		SETTING_BOOL,		(void*)&eth32.settings.autoDelay,
		"auto weapon delay",
	},
	{ "hitbox",			"1",			SETTING_INT,		(void*)&eth32.settings.hitboxType,
		"set the hitbox style to use for aimbot",
		HITBOX_OFF, HITBOX_MAX-2,
		{
			{ (int)HITBOX_CUSTOM,	"custom" },
		},
	},
	{ "tracetype",		"2",			SETTING_INT,		(void*)&eth32.settings.traceType,
		"set the style of trace used to determine if a target is visible",
		0, TRACE_MAX-1,
		{
			{ (int)TRACE_CENTER,			"center" },
			{ (int)TRACE_CONTOUR,			"contour" },
			{ (int)TRACE_RANDOM_VOLUME,		"randvolume" },
			{ (int)TRACE_RANDOM_SURFACE,		"randsurface" },
            		{ (int)TRACE_CAPSULE_VOLUME,	        "capvolume" },
            		{ (int)TRACE_CAPSULE_SURFACE,		"capsurface" },
		},
	},
	{ "predtype",		"1",			SETTING_INT,		(void*)&eth32.settings.predictionType,
		"set the style of trace used to determine if a target is visible",
		0, PRED_MAX-1,
		{
			{ (int)PRED_OFF,		"Off" },
			{ (int)PRED_PING,		"Ping" },
			{ (int)PRED_MAN,		"Manual" },
		},
	},
	{ "hitsounds",		"0",			SETTING_INT,		(void*)&eth32.settings.hitsounds,
		"set the style of trace used to determine if a target is visible",
		0, HIT_MAX-1,
		{
			{ (int)HIT_OFF,		"Off" },
			{ (int)HIT_HEAD,	"head" },
			{ (int)HIT_HEADSHOT,	"headshot" },
			{ (int)HIT_BODY,	"body" },
		},
	},
	{ "trans_console",		"false",		SETTING_BOOL, 		(void*)&eth32.settings.transparantConsole,
		"make the console transparent so you can see whats going on :)"
	},
	{ "valgrentrajectory", 		"true",			SETTING_BOOL, 		(void*)&eth32.settings.valGrenTrajectory,
		"make additional calculations to make sure the grenade doesn't hit anything",
	},
	{ "valrifletrajectory", 	"true",			SETTING_BOOL, 		(void*)&eth32.settings.valRifleTrajectory,
		"make additional calculations to make sure the riflegrenade doesn't hit anything",
	},
	{ "grenadeZ",			"-50",			SETTING_FLOAT,		(void*)&eth32.settings.grenadeZ,
		"z correction for grenade aimpoint",
	},
	{ "riflenadeZ",			"10.5",			SETTING_FLOAT,		(void*)&eth32.settings.riflenadeZ,
		"z correction for rifle grenade aimpoint",
	},
	{ "grenadeautofire", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeAutoFire,
		"auto-fire grenade so it will explode right on contact",
	},
	{ "rifleautofire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.rifleAutoFire,
		"auto-fire riflegrenade as soon as we have a firing solution",
	},
	{ "grenadetracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeTracer,
		"shows trajectory of the grenade",
	},
	{ "rifletracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.rifleTracer,
		"shows trajectory of the rifle grenade",
	},
	{ "grensenslock", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeSenslock,
		"locks view if there is a valid firing solution",
	},
	{ "grenadebot", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeBot,
		"toggles the grenade aimbot",
	},
	{ "riflebot", 			"true",			SETTING_BOOL,		(void*)&eth32.settings.rifleBot,
		"toggles the riflegrenade aimbot",
	},
	{ "grenblockfire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeBlockFire,
		"blocks firing grenades by accident if there isn't a firing solution",
	},
	{ "grenfiredelay",		"125",			SETTING_INT,		(void*)&eth32.settings.grenadeFireDelay,
		"time left until the grenade explodes after it was launched",
		0, 1000,
	},
	{ "radiusdamage_enable", 	"true",			SETTING_BOOL,		(void*)&eth32.settings.ballisticRadiusDamage,
		"if target is not visible, try a point within the grenade's blast radius",
	},
	{ "radiusdamage",		"100",			SETTING_FLOAT,		(void*)&eth32.settings.radiusDamage,
		"the grenade blast radius to use",
		30, 1000,
	},
	{ "grenpredict",		"1",			SETTING_INT,		(void*)&eth32.settings.ballisticPredict,
		"predict targets for grenade aimbot",
		0, RF_PREDICT_MAX-1,
		{
				{ (int)RF_PREDICT_OFF, 		"off" },
				{ (int)RF_PREDICT_LINEAR, 	"linear" },
				{ (int)RF_PREDICT_LINEAR2, 	"linear/2" },
				{ (int)RF_PREDICT_AVG, 		"average pos" },
				{ (int)RF_PREDICT_SMART, 	"smart" },
		}
	},
	{ "grenautotarg",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autoGrenTargets,
		"automatically selects grenade targets based on crosshair distance",
	},
	{ "fov",			"360",			SETTING_FLOAT,		(void*)&eth32.settings.fov,
		"set the field of vision that the aimbot can select targets from",
		0, 360,
	},
	{ "aimprotect",		"0",				SETTING_INT,		(void*)&eth32.settings.aimprotect,
		"turn off aimbot when people are watching",
		0, PROTECT_MAX-2,
		{
			{ (int)PROTECT_OFF,	"off" },
			{ (int)PROTECT_SPECS,	"specs" },
			{ (int)PROTECT_ALL,	"all" },
		},
	},
	{ "multibounce",		"true",			SETTING_BOOL,		(void*)&eth32.settings.allowMultiBounce,
		"use extra CPU to calculate secondary trajectories with multiple bounces off walls",
	},
	{ "predbot",			"-0.050",		SETTING_FLOAT,		(void*)&eth32.settings.predbot,
		"set amount of prediction to be applied to (bot) targets",
		-1.0, 1.0,
	},
	{ "pred",			"-0.005",		SETTING_FLOAT,		(void*)&eth32.settings.pred,
		"set amount of prediction to be applied to (human) targets",
		-1.0, 1.0,
	},
	/*{ "spread",			"0",		SETTING_FLOAT,		(void*)&eth32.settings.spread,
		"sets weapon spread",
		0, 500,
	},*/
	{ "headsize",	   	"10",	    		SETTING_FLOAT,		(void*)&eth32.settings.headBoxSize,
		"head hitbox size",
		1, 15,
	},
	{ "bodysize",			"25.5",			SETTING_FLOAT,		(void*)&eth32.settings.bodybox,
		"body hitbox size",
		0, 40,
	},
	{ "autovecz",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autoVecZ,
		"auto vec Z calculation",
	},	
	{ "standX",		"0.5",				SETTING_FLOAT,		(void*)&eth32.settings.standX,
		"standing and running X vecs",
		-10.0, 10.0,
	},
	{ "standY",		"-0.2",				SETTING_FLOAT,		(void*)&eth32.settings.standY,
		"standing and running Y vecs",
		-10.0, 10.0,
	},
	{ "standlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standlowZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standmedZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standfarZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	
	{ "runX",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.runX,
		"standing and running X vecs",
		-10.0, 10.0,
	},
	{ "runY",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.runY,
		"standing and running Y vecs",
		-10.0, 10.0,
	},
	{ "runlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runlowZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "runmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runmedZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "runfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runfarZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	
	{ "crouchX",		"0.1",				SETTING_FLOAT,		(void*)&eth32.settings.crouchX,
		"crouching and crawling X vecs",
		-10.0, 10.0,
	},
	{ "crouchY",		"-0.3",				SETTING_FLOAT,		(void*)&eth32.settings.crouchY,
		"crouching and crawling Y vecs",
		-10.0, 10.0,
	},
	{ "crouchlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchlowZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchmedZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchfarZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	
	{ "crawlX",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.crawlX,
		"crouching and crawling X vecs",
		-10.0, 10.0,
	},
	{ "crawlY",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.crawlY,
		"crouching and crawling Y vecs",
		-10.0, 10.0,
	},
	{ "crawllowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawllowZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crawlmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawlmedZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crawlfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawlfarZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	
	{ "proneX",		"0.450",				SETTING_FLOAT,		(void*)&eth32.settings.proneX,
		"prone X vecs",
		-10.0, 10.0,
	},
	{ "proneY",		"-0.450",				SETTING_FLOAT,		(void*)&eth32.settings.proneY,
		"prone Y vecs",
		-10.0, 10.0,
	},
	{ "proneZ",		"6.800",			SETTING_FLOAT,		(void*)&eth32.settings.proneZ,
		"correction amount for Z vec, close range (prone)",
		-10.0, 10.0,
	},	
	{ "pointshead",	   	"10",	   			SETTING_INT,		(void*)&eth32.settings.pointshead,
		"autopoints for head",
		0, 64,
	},
	{ "pointsbody",	   		"64",	    		SETTING_INT,		(void*)&eth32.settings.pointsbody,
		"autopoints for body",
		0, 64,
	},
	{ "delayclose",	   	"0",	   		SETTING_INT,		(void*)&eth32.settings.delayClose,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delaymed",	   	"11",	   		SETTING_INT,		(void*)&eth32.settings.delayMed,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delayfar",	   		"16",	    		SETTING_INT,		(void*)&eth32.settings.delayFar,
		"weapon delay for far distance",
		0, 50,
	},
	{ "predself",		"-0.020",			SETTING_FLOAT,		(void*)&eth32.settings.predSelf,
		"set amount to prediction to applied to our own movement (only for manual)",
		-1, 1,
	},
	{ "predself_type",		"3",			SETTING_INT,		(void*)&eth32.settings.predSelfType,
		"set the type of self prediction to apply",
		0, SPR_MAX-1,
		{
			{ (int)SPR_OFF,		"off" },
			{ (int)SPR_MANUAL,	"Manual" },
			{ (int)SPR_PING,	"Ping" },
			{ (int)SPR_LEET,	"L337" },
		},
	},
	{ "dynamichitbox",		"1.3",			SETTING_FLOAT,		(void*)&eth32.settings.dynamicHitboxScale,
		"set how much a hitbox will scale based on player movement",
		0, 3,
	},
	{ "killspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.killSpam,
		"enable automated message when a target is killed",
	},
	{ "multikillspam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.multikillSpam,
		"enable automated message when making a multikill",
	},
	{ "deathspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.deathSpam,
		"enable automated message when you die",
	},
	{ "suicidespam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.suicideSpam,
		"enable automated PM when someone commits suicide",
	},
	{ "selfkillspam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.selfkillSpam,
		"enable automated message when you /kill or suicide",
	},
	{ "pmkillspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pmKillspam,
		"make PM killspam to victim instead of global chat",
	},
	{ "killspamtype",		"0",			SETTING_INT,		(void*)&eth32.settings.KillspamType,
		"make killspam for everyone or only selected players",
		0, KILLSPAM_MAX-1,
		{
			{ (int)KILLSPAM_ALL,		"all" },
			{ (int)KILLSPAM_SELECTED,	"selected" },
		},
	},
	/*{ "gunsounds",			"true",			SETTING_BOOL,		(void*)&eth32.settings.gunSounds,
		"enables sounds to be played when a player is killed",
	},*/
	{ "killsounds",			"true",			SETTING_BOOL,		(void*)&eth32.settings.killSounds,
		"enables sounds to be played when a player is killed",
	},
	/*{ "hitsounds",			"true",			SETTING_BOOL,		(void*)&eth32.settings.hitsounds,
		"enable sounds when you do damage to another player",
	},
	{ "hitsounds2",			"false",		SETTING_BOOL,		(void*)&eth32.settings.hitsounds2,
		"enable sounds when you do damage to another player",
	},
	{ "hitsounds3",			"false",		SETTING_BOOL,		(void*)&eth32.settings.hitsounds3,
		"enable sounds when you do damage to another player",
	},*/
	{ "mkillresettime",		"3000",			SETTING_FLOAT,		(void*)&eth32.settings.mkResetTime,
		"period in milliseconds after which multikill sound gets reset",
		0, 10000,
	},
	{ "hqsounds", 			"false",		SETTING_BOOL,		(void*)&eth32.settings.hqSounds,
		"play HQ sounds (like 'Dynamite Planted')",
	},
	{ "puresounds",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pureSounds,
		"only play pure sounds, this will disable anoying custom voicechats",
	},
	{ "teamweaponoutline",		"0 255 255",		SETTING_BYTE3,		(void*)eth32.settings.TeamWeaponOutline,
		"set the color of Team weapon outchams",
	},
	{ "enemyweaponoutline",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.EnemyWeaponOutline,
		"set the color of Team weapon outchams",
	},
	{ "colorteam",			"0 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeam,
		"set the color of team chams",
	},
	{ "colorteamout",		"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamOut,
		"set the color of team outline",
	},
	{ "colorteamhid",		"0 100 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamHidden,
		"set the color of team chams when hidden",
	},
	{ "colorenemy",			"255 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemy,
		"set the color of enemy chams",
	},
	{ "colorenemyout",		"255 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyOut,
		"set the color of enemy outline",
	},
	{ "colorenemyhid",		"100 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyHidden,
		"set the color of enemy chams when hidden",
	},
	{ "colorinvuln",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorInvulnerable,
		"set the color of player chams when they are invulnerable",
	},
	{ "colorteamweap",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamWeapon,
		"set the color of team weapons",
	},
	{ "colorenemyweap", 		"255 75 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyWeapon,
		"set the color of enemy weapons",
	},
	{ "colorhealth",		"230 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorHealth,
		"set the color of health kits",
	},
	{ "colorammo",			"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorAmmo,
		"set the color of ammo boxes",
	},
	//Class ESP Color
	{ "classteam",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.clsTeam,
		"set the color of team class esp",
	},
	{ "classenemy",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.clsEnemy,
		"set the color of team class esp",
	},
	{ "classopacity",		"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.clsOpacity,
		"sets the class icon esp opacity",
		0, 1,
	},
	// hitbox drawing, custom tracers
	{ "headhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadHitbox,
		"enable head hitbox drawing",
	},
	{ "headaxes",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadAxes,
		"enable hitbox axis drawing",
	},
	{ "bodyhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBodyHitbox,
		"enable body hitbox drawing",
	},
	{ "bulletrail",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBulletRail,
		"enable bullet tracers",
	},
	{ "railwallhack",		"true",			SETTING_BOOL,		(void*)&eth32.settings.railWallhack,
		"see hitboxes and bullet tracers through walls",
	},
	{ "colorheadhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorHeadHitbox,
		"set the color of the head hitbox",
	},
	{ "colorbodyhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorBodyHitbox,
		"set the color of the body hitbox",
	},
	{ "colorbulletrail",		"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorBulletRail,
		"set the color of bullet tracers",
	},
	{ "colorxaxis",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorXAxis,
		"set the color of hitbox x-axis",
	},
	{ "coloryaxis",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorYAxis,
		"set the color of hitbox y-axis",
	},
	{ "colorzaxis",			"0 0 1",		SETTING_VEC3,		(void*)eth32.settings.colorZAxis,
		"set the color of hitbox z-axis",
	},
	{ "headhbtime",			"40",			SETTING_INT,		(void*)&eth32.settings.headRailTime,
		"set head hitbox stay time (in msec)",
		0, 1000,
	},
	{ "bodyhbtime",			"30",			SETTING_INT,		(void*)&eth32.settings.bodyRailTime,
		"set body hitbox stay time (in msec)",
		0, 1000,
	},
	{ "xhaircolor",		"0 1 0",			SETTING_VEC3,		(void*)&eth32.settings.xhairColor,
		"sets the crosshair color",
	},
	{ "xhairopacity",		"1",			SETTING_FLOAT,		(void*)&eth32.settings.xhairOpacity,
		"sets the crosshair opacity",
		0, 1,
	},
	{ "classesp",			"true",			SETTING_BOOL,		(void*)&eth32.settings.classIcon,
		"enable class icon esp for players",
	},
	{ "classespsize",		"5",			SETTING_FLOAT,		(void*)&eth32.settings.clsSize,
		"sets the class icon esp size",
		3, 30,
	},
	{ "classesptype",		"1",			SETTING_INT,		(void*)&eth32.settings.classEspType,
		"sets the class icon esp style",
		0, CLS_MAX-1,
		{
			{ (int)CLS_STATIC,			"static" },
			{ (int)CLS_DIST,			"distance" },
		},
	},
	{ "etproOs",			"true",			SETTING_BOOL,		(void*)&eth32.settings.etproOs,
		"enable etpro os spoofing\n false = win32, true = linux",
	},
	{ "pk3name",			"eth32nix.pk3",		SETTING_STRING,		(void*)eth32.settings.pk3file,
		"the main eth32 pk3 file name",
	},
	{ "etproGuid",			"UNKNOWN",		SETTING_STRING,		(void*)eth32.settings.etproGuid,
		"set your custom etpro GUID",
	},
	{ "jaymac",			"UNKNOWN",		SETTING_STRING,		(void*)eth32.settings.jayMac,
		"set your custom jaymod MAC address (prevents bans based on MAC)",
	},
	{ "autocrouch",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autoCrouch,
		"enable auto crouching when target is visible",
	},
	// view values
	{ "vw_origviewvalues",		"false",		SETTING_BOOL,		(void*)&eth32.settings.origViewValues,
		"enable unmodified view calculations",
	},
	{ "vw_interpolatedps",		"true",			SETTING_BOOL,		(void*)&eth32.settings.interpolatedPs,
		"enable interpolated playerstate",
	},
	{ "vw_damagefeedback",		"false",		SETTING_BOOL,		(void*)&eth32.settings.dmgFeedback,
		"enable damage feedback",
	},
	{ "preaim",			"true",		SETTING_BOOL,		(void*)&eth32.settings.preAim,
		"preaim targets",
	},
	{ "preaimtime",			"70",		SETTING_FLOAT,		(void*)&eth32.settings.preAimTime,
		"preaim time - higher is earlier aiming",
		0, 5000,
	},
	{ "preshoot",			"true",		SETTING_BOOL,		(void*)&eth32.settings.preShoot,
		"pre-shoot at targets before they are logically visible",
	},
	{ "preshoottime",		"70",			SETTING_FLOAT,		(void*)&eth32.settings.preShootTime,
		"preshoot time - higher means earlier shot (and higher chance of miss)",
		0, 5000,
	},
	{ "animcor", 			"2.500", 		SETTING_FLOAT, 		(void*)&eth32.settings.animCorrection,
		"animation correction for aimbot",
		-10, 10,
	},
 	// LINUX ONLY BELOW HERE!
	{ "hackvisuals", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.drawHackVisuals,
		"draw hack visuals",
	},
 	{ "pbscreenshot", 		"1", 			SETTING_INT, 		(void*)&eth32.settings.pbScreenShot,
		"type of PB screenshot",
  		0, PB_SS_MAX-1,
		{
			{ (int)PB_SS_NORMAL,	"normal" },
			{ (int)PB_SS_CUSTOM,	"custom" },
			{ (int)PB_SS_CLEAN,	"clean" },
		},
	},
	{ "bannerfmt", "^7Kills: ^2[k] ^0| ^7Deaths: ^2[d] ^0| ^7Accuracy: ^2[\\]^n% ^0| ^7Headshots: ^2[/] &&^7Health: ^2[h] ^0| ^7Ammo: ^2[a] ^0| ^7Current Spree: ^2[S] ^0| ^7PBSS: ^2[s]", SETTING_STRING, (void*)eth32.settings.BannerFmt,
		"banner format",
	},
	{ "bannerscale", 		"1.13", 		SETTING_FLOAT, 		(void*)&eth32.settings.BannerScale,
		"Banner font scale",
	},
	{ "gui_banner", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.guiBanner,
		"GUI: show stats banner",
	},
	// namesteal stuff
	{ "namesteal", 			"false", 		SETTING_BOOL, 		(void*)&eth32.settings.doNamesteal,
		"Enable namestealing",
	},
	{ "namestealExact", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.nsSmartMode,
		"Enables PB proof exact namestealing",
	},
	{ "namesteal_grace", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealGrace,
		"Time to wait in ms to start stealing after joining a server",
		0, 20000,
	},
	{ "namesteal_mode", 		"2", 			SETTING_INT, 		(void*)&eth32.settings.NamestealMode,
		"Type of namestealing to do",
		0, NAMESTEAL_MAX-1,
		{
			{ (int)NAMESTEAL_TEAM,	"team" },
			{ (int)NAMESTEAL_ENEMY,	"enemy" },
			{ (int)NAMESTEAL_ALL,	"all" },
			{ (int)NAMESTEAL_FILE,	"file" },
		},
	},
	{ "namesteal_delay", 		"700", 			SETTING_INT, 		(void*)&eth32.settings.NamestealDelay,
		"Time to wait between changing names (in ms)",
		0, 20000,
	},
	{ "disguised", 			"true", 		SETTING_BOOL, 		(void *)&eth32.settings.drawDisguised,
		"draw disguised ESP on players",
	},
	{ "grenadedlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeDlight,
		"extra grenade lights inidicating blast area",
	},
	{ "mortardlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarDlight,
		"extra mortar lights inidicating blast area",
	},
	{ "mortartrace",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarTrace,
		"show mortar trace lines and impact ESP",
	},
	{ "artymarkers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.artyMarkers,
		"show arty blast area lights and ESP",
	},
};
